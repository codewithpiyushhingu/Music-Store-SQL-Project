I have used Microsoft SQL Server Management Studio for this project.

Database Name - Music


-- Basic
--1. Who is the senior most employee based on job title?

select top 1 employee_id, first_name, last_name, levels  from employee
order by levels desc 


--2. Which countries have the most Invoices?

select top 1 COUNT(*) as Total_Count, billing_country from invoice
group by billing_country
order by Total_Count desc


--3. What are top 3 values of total invoice?

select top 3 * from invoice
order by total desc


--4. Which city has the best customers? We would like to throw a promotional Music Festival in the city we made the most money. 

select SUM(total) as Invoice_Total, billing_city from invoice
group by billing_city
order by Invoice_Total desc


--5. Who is the best customer? The customer who has spent the most money will be declared the best customer.

select top 1 customer.first_name, customer.last_name, SUM(invoice.total) as Total 
from customer join invoice
on customer.customer_id = invoice.customer_id
group by customer.first_name, customer.last_name
order by Total desc


-- Moderate
-- 1. Write query to return the email, first name, last name, & Genre of all Rock Music listeners. Return your list ordered alphabetically by email starting with A.

select DISTINCT customer.email, customer.first_name, customer.last_name
from customer join invoice
on customer.customer_id = invoice.customer_id
join invoice_line
on invoice.invoice_id = invoice_line.invoice_id
join track
on track.track_id = invoice_line.track_id
join genre
on genre.genre_id = track.genre_id
where genre.name like 'ROck'
order by customer.email



select distinct customer.email, customer.first_name, customer.last_name 
from customer join invoice
on customer.customer_id = invoice.customer_id
join invoice_line
on invoice_line.invoice_id = invoice.invoice_id
where track_id IN 
(
select track_id 
from track join genre
on track.genre_id = genre.genre_id
where genre.name like 'Rock'
)
order by email


-- 2. Let's invite the artists who have written the most rock music in our dataset. Write a query that returns the Artist name and total track count of the top 10 rock bands.

select top 10 artist.artist_id, COUNT(artist.artist_id) as Total_Songs
from artist join album
on artist.artist_id = album.artist_id
join track
on album.album_id = track.album_id
join genre
on track.genre_id = genre.genre_id
where genre.name like 'Rock'
group by artist.artist_id
order by Total_Songs desc


-- 3. Return all the track names that have a song length longer than the average song length. Return the Name and Milliseconds for each track. Order by the song length with the longest songs listed first.

select name, milliseconds 
from track
where milliseconds >
(
select AVG(milliseconds) as Avg_track_length
from track
)
order by milliseconds desc


-- Advance
-- 1. Find how much amount spent by each customer on artists? Write a query to return customer name, artist name and total spent.

WITH best_selling_artist AS
(
select top 1 artist.artist_id,
SUM(invoice_line.quantity * invoice_line.unit_price) as Total_Sales
from invoice_line join track
on invoice_line.track_id = track.track_id join album
on track.album_id = album.album_id join artist
on album.artist_id = artist.artist_id
group by artist.artist_id
order by Total_Sales desc
)
select customer.customer_id,customer.first_name, customer.last_name,
SUM(invoice_line.quantity * invoice_line.unit_price) as Amount_Spent
from invoice join customer
on customer.customer_id = invoice.customer_id join invoice_line
on invoice_line.invoice_id = invoice.invoice_id join track
on track.track_id = invoice_line.track_id join album
on album.album_id = track.album_id join best_selling_artist
on best_selling_artist.artist_id = album.artist_id
group by customer.customer_id, customer.first_name, customer.last_name
order by Amount_Spent desc


-- 2. Find how much amount spent by each customer on artists? Write a query to return customer name, artist name and total spent

WITH popular_genre as
(
select COUNT(invoice_line.quantity) as purchases, customer.country, genre.name, genre.genre_id,
ROW_NUMBER() over(partition by customer.country ORDER BY COUNT(invoice_line.quantity)desc) as rowno
from invoice_line join invoice
on invoice.invoice_id = invoice_line.invoice_id join customer
on customer.customer_id = invoice.customer_id join track
on track.track_id = invoice_line.track_id join genre
on genre.genre_id = track.genre_id
group by customer.country, genre.name, genre.genre_id
order by customer.country asc, purchases desc
)
select * from popular_genre where rowno<=1



-- 3. Write a query that determines the customer that has spent the most on music for each country. 
-- Write a query that returns the country along with the top customer and how much they spent. 
-- For countries where the top amount spent is shared, provide all customers who spent this amount.

WITH Customter_with_country AS (
		SELECT customer.customer_id,first_name,last_name,billing_country,SUM(total) AS total_spending,
	    ROW_NUMBER() OVER(PARTITION BY billing_country ORDER BY SUM(total) DESC) AS RowNo 
		FROM invoice
		JOIN customer ON customer.customer_id = invoice.customer_id
		GROUP BY 1,2,3,4
		ORDER BY 4 ASC,5 DESC)
SELECT * FROM Customter_with_country WHERE RowNo <= 1


Thank You!!
